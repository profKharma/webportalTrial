@page
@model webportalTrial.Pages.homeModel
@{
}


<!-- links for dashboard edits-->
<link rel="stylesheet" href="css/vendor.css" />
<link rel="stylesheet" href="css/waitMe.min.css" />
<link rel="stylesheet" href="css/bootstrap-icons.css" />
<link rel="stylesheet" href="css/theme.min.css" />
<link rel="stylesheet" href="css/hs-mega-menu.min.css" />
<link rel="stylesheet" href="css/custom-theme.css" />
<link rel="stylesheet" href="css/manageReq.css" />
<link rel="stylesheet" href="css/reqDashboard.css" />
<link rel="stylesheet" href="css/filter.css" />


<main id="content">
    <div class="container">
        <div class="spacer-top mb-8">
            <div class="card card-lg">
                <div class="card-header bg-primary-blue position-relative overflow-hidden">
                    <h1 id="DBhead" class="card-title h2 text-white"> CORPORATE MANAGEMENT ESTABLISHMENT BRANCH DASHBOARD</h1>
                    <div class="position-absolute" style="top: -6rem; left: -6rem;">
                        <img src="images/svg/components/shape-1-soft-light.svg" alt="SVG" width="500" style="width: 12rem;">
                    </div>
                    <div class="position-absolute" style="bottom: -6rem; right: -7rem;">
                        <img src="images/svg/components/shape-7-soft-light.svg" alt="SVG" width="250">
                    </div>
                </div>
            </div>
        </div>

        <div class="row mb-9 align-items-center justify-content-center">
            <div class="col-md-5">
                <input type="text" id="SearchField" class="form-control rounded" placeholder="Search by column..." maxlength="255" />
            </div>
            <div class="col-md-2">
                <button id="reqSearchBtn" class="btn custom-btn w-100" disabled>Search</button>
            </div>
            <div class="col-md-3 mt-2 mt-md-0">
                <a href="/createRequest" class="btn custom-btn w-100">
                    <i class="bi bi-pencil-square me-2"></i> Create Request
                </a>
            </div>
            <div class="col-md-2 mt-2 mt-md-0">  <button id="filterBtn" class="btn custom-btn w-100">    <i class="bi bi-funnel me-2"></i> Filter   </button></div>
        </div>

        <div id="cmebDB" class="card p-4">
            <span class="label">MANAGE REQUESTS</span>
            <table id="manageRequestsGrid" class="table table-striped table-bordered mt-3">
                <thead class="table-light text-center">
                    <tr>
                        <th data-sort="MDA">MDA <i class="bi sort-icon" data-sort-dir="none"></i></th>
                        <th data-sort="Tracking Number">Tracking Number <i class="bi sort-icon" data-sort-dir="none"></i></th>
                        <th data-sort="Request Type">Request Type <i class="bi sort-icon" data-sort-dir="none"></i></th>
                        <th data-sort="Status">Status <i class="bi sort-icon" data-sort-dir="none"></i></th>
                        <th data-sort="Start Date">Start Date <i class="bi sort-icon" data-sort-dir="none"></i></th>
                        <th data-sort="End Date">End Date <i class="bi sort-icon" data-sort-dir="none"></i></th>
                        
                        <th data-sort="Assignee">Assignee <i class="bi sort-icon" data-sort-dir="none"></i></th>
                        <th data-sort="Comments">Comments <i class="bi sort-icon" data-sort-dir="none"></i></th>
                        <th>Actions</th>
                    </tr>
                </thead>

                <tbody class="text-center align-middle">
                    <tr>
                        <td>Ministry of Finance</td>
                        <td>TRACK-SUB-001</td>
                        <td>Establishment Request</td>
                        <td>Submitted</td>
                        <td>2025-04-20</td>
                        <td>2025-05-20</td>
                        
                        <td>Jane Doe</td>
                        <td>Initial submission for new department was rejected.</td>
                        <td>
                            <a href="missingDocs" class="edit-icon" title="Edit"><i class="bi bi-pencil-square"></i></a>
                            <a href="#" class="delete-icon" title="Delete"><i class="bi bi-trash"></i></a>
                        </td>
                    </tr>
                    <tr>
                        <td>Ministry of Health</td>
                        <td>TRACK-PEN-002</td>
                        <td>Job Evaluation</td>
                        <td>Draft</td>
                        <td>2025-04-25</td>
                        <td></td>
                        
                        <td></td>
                        <td>Awaiting feedback from HR.</td>
                        <td>
                            <a href="createRequest" class="edit-icon" title="Edit"><i class="bi bi-pencil-square"></i></a>
                            <a href="#" class="delete-icon" title="Delete"><i class="bi bi-trash"></i></a>
                        </td>
                    </tr>
                    <tr>
                        <td>Ministry of Education</td>
                        <td>TRACK-PEN-003</td>
                        <td>Job Analysis</td>
                        <td>Submitted</td>
                        <td>2025-04-28</td>
                        <td>2025-05-28</td>
                        
                        <td>Emily Carter</td>
                        <td>Pending approval from department head.</td>
                        <td>
                            <a href="uploadDocs" class="edit-icon" title="Edit"><i class="bi bi-pencil-square"></i></a>
                            <a href="#" class="delete-icon" title="Delete"><i class="bi bi-trash"></i></a>
                        </td>
                    </tr>
                    <tr>
                        <td>Ministry of Transport</td>
                        <td>TRACK-CASE-004</td>
                        <td>Post Audit</td>
                        <td>Draft</td>
                        <td>2025-04-30</td>
                        <td></td>
                        
                        <td></td>
                        <td>Case submitted for review.</td>
                        <td>
                            <a href="createRequest" class="edit-icon" title="Edit"><i class="bi bi-pencil-square"></i></a>
                            <a href="#" class="delete-icon" title="Delete"><i class="bi bi-trash"></i></a>
                        </td>
                    </tr>
                    <tr>
                        <td>Ministry of Labour</td>
                        <td>TRACK-PEND-005</td>
                        <td>Reconciliation Request</td>
                        <td>Submitted</td>
                        <td>2025-05-01</td>
                        <td>2025-06-01</td>
                        
                        <td>Olivia Brown</td>
                        <td>Draft saved, not yet submitted.</td>
                        <td>
                            <a href="uploadDocs" class="edit-icon" title="Edit"><i class="bi bi-pencil-square"></i></a>
                            <a href="#" class="delete-icon" title="Delete"><i class="bi bi-trash"></i></a>
                        </td>
                    </tr>
                    <tr id="noResultsRow" style="display: none;">
                        <td colspan="10" class="text-center">No results found.</td>
                    </tr>
                </tbody>

            </table>
        </div>
    </div>

</main>


<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="deleteModalBody">
                Are you sure you want to delete this request? This action cannot be undone.
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Confirm Delete</button>
            </div>
        </div>
    </div>
</div>

<!-- <!-- Filter Modal -->
<div class="modal fade" id="filterModal" tabindex="-1" aria-labelledby="filterModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="filterModalLabel">Filter Requests</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="filterForm">
                    <div class="mb-3">
                        <label for="filterMDA" class="form-label">MDA</label>
                        <input type="text" class="form-control" id="filterMDA" placeholder="Enter MDA">
                    </div>
                    <div class="mb-3">
                        <label for="filterStatus" class="form-label">Status</label>
                        <select class="form-select" id="filterStatus">
                            <option value="">All</option>
                            <option value="Submitted">Submitted</option>
                            <option value="Draft">Draft</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="filterPriority" class="form-label">Priority Level</label>
                        <select class="form-select" id="filterPriority">
                            <option value="">All</option>
                            <option value="High">High</option>
                            <option value="Medium">Medium</option>
                            <option value="Low">Low</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-secondary" id="resetFilterBtn">Reset</button>
                <button type="button" class="btn btn-primary" id="applyFilterBtn">Apply Filters</button>
            </div>
        </div>
    </div>
</div>

<!-- JS links for dashboard edits-->

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // --- Mega Menu Initialization ---
        try {
            if (typeof HSMegaMenu === 'function') {
                new HSMegaMenu('.js-mega-menu', {
                    desktop: { position: 'left', animation: 'fade' },
                    mobile: { animation: 'slide' }
                }).init();
            }
        } catch (error) {
            console.error('Error initializing HSMegaMenu:', error);
        }

        // Ensure menu is visible on load
        const menu = document.querySelector('.js-mega-menu .navbar-nav');
        if (menu) {
            menu.style.display = 'flex';
        }

        // Handle nav link active state
        const navLinks = document.querySelectorAll('.navbar-nav .nav-link');
        navLinks.forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault();
                navLinks.forEach(l => l.classList.remove('active'));
                this.classList.add('active');
            });
        });

        // --- Table and Element References ---
        const searchField = document.getElementById('SearchField');
        const searchBtn = document.getElementById('reqSearchBtn');
        const filterBtn = document.getElementById('filterBtn');
        const filterModalElement = document.getElementById('filterModal');
        const applyFilterBtn = document.getElementById('applyFilterBtn');
        const resetFilterBtn = document.getElementById('resetFilterBtn');
        const table = document.getElementById('manageRequestsGrid');
        const tableBody = table ? table.querySelector('tbody') : null;
        const allRows = tableBody ? Array.from(tableBody.querySelectorAll('tr:not(#noResultsRow)')) : [];
        const noResultsRow = document.getElementById('noResultsRow');
        const deleteModalElement = document.getElementById('deleteConfirmModal');
        const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
        const deleteModalBody = document.getElementById('deleteModalBody');

        let currentSortColumn = '';
        let currentSortDir = 'asc';
        let currentFilters = {};

        // --- Filter Functionality ---
        function getCurrentFilters() {
            const filterMDA = document.getElementById('filterMDA');
            const filterStatus = document.getElementById('filterStatus');
            const filterPriority = document.getElementById('filterPriority');

            if (!filterMDA || !filterStatus || !filterPriority) {
                console.error('One or more filter inputs are missing.');
                return {};
            }

            return {
                mda: filterMDA.value.trim().toLowerCase(),
                status: filterStatus.value.trim().toLowerCase(),
                priority: filterPriority.value.trim().toLowerCase()
            };
        }

        function filterTable(searchTerm, filters) {
            if (!tableBody || !noResultsRow) {
                console.error('Table body or noResultsRow not found.');
                return;
            }

            const term = searchTerm.toLowerCase();
            let hasResults = false;

            allRows.forEach(row => {
                const cells = row.querySelectorAll('td');
                const mda = cells[0].textContent.trim().toLowerCase();
                const status = cells[3].textContent.trim().toLowerCase();
                const priority = cells[6].textContent.trim().toLowerCase();

                // Search match (checks all columns except Actions)
                const matchesSearch = term === '' || Array.from(cells).slice(0, -1).some(cell => cell.textContent.toLowerCase().includes(term));

                // Filter matches
                let matchesFilters = true;
                if (filters.mda && !mda.includes(filters.mda)) {
                    matchesFilters = false;
                }
                if (filters.status && status !== filters.status) {
                    matchesFilters = false;
                }
                if (filters.priority && priority !== filters.priority) {
                    matchesFilters = false;
                }

                row.style.display = matchesSearch && matchesFilters ? '' : 'none';
                if (matchesSearch && matchesFilters) {
                    hasResults = true;
                }
            });

            noResultsRow.style.display = (term !== '' || Object.values(filters).some(val => val !== '')) && !hasResults ? '' : 'none';
        }

        if (searchField && searchBtn) {
            searchBtn.disabled = !searchField.value.trim();
            searchBtn.classList.toggle('btn-search-active', !!searchField.value.trim());

            searchField.addEventListener('input', function () {
                const searchTerm = this.value.trim();
                searchBtn.disabled = !searchTerm;
                searchBtn.classList.toggle('btn-search-active', !!searchTerm);
                filterTable(searchTerm, currentFilters);
            });

            searchBtn.addEventListener('click', function () {
                if (!this.disabled) {
                    filterTable(searchField.value.trim(), currentFilters);
                }
            });
        } else {
            console.error('Search field or button not found.');
        }

        if (filterBtn && filterModalElement) {
            filterBtn.addEventListener('click', function () {
                const modalInstance = bootstrap.Modal.getOrCreateInstance(filterModalElement);
                modalInstance.show();
            });
        } else {
            console.error('Filter button or modal not found.');
        }

        if (applyFilterBtn) {
            applyFilterBtn.addEventListener('click', function () {
                currentFilters = getCurrentFilters();
                filterTable(searchField?.value.trim() || '', currentFilters);
                const modalInstance = bootstrap.Modal.getOrCreateInstance(filterModalElement);
                modalInstance.hide();
            });
        } else {
            console.error('Apply filter button not found.');
        }

        if (resetFilterBtn) {
            resetFilterBtn.addEventListener('click', function () {
                const filterMDA = document.getElementById('filterMDA');
                const filterStatus = document.getElementById('filterStatus');
                const filterPriority = document.getElementById('filterPriority');

                if (filterMDA && filterStatus && filterPriority) {
                    filterMDA.value = '';
                    filterStatus.value = '';
                    filterPriority.value = '';
                    currentFilters = {};
                    filterTable(searchField?.value.trim() || '', currentFilters);
                } else {
                    console.error('One or more filter inputs are missing for reset.');
                }
            });
        } else {
            console.error('Reset filter button not found.');
        }

        // --- Sorting Functionality ---
        function sortTable(columnIndex, sortDir) {
            allRows.sort((a, b) => {
                let aValue = a.children[columnIndex].textContent.trim();
                let bValue = b.children[columnIndex].textContent.trim();

                // Handle date columns (Start Date and End Date)
                if (columnIndex === 4 || columnIndex === 5) {
                    aValue = new Date(aValue);
                    bValue = new Date(bValue);
                }

                if (sortDir === 'asc') {
                    return aValue > bValue ? 1 : -1;
                } else {
                    return aValue < bValue ? 1 : -1;
                }
            });

            tableBody.innerHTML = '';
            allRows.forEach(row => tableBody.appendChild(row));
            tableBody.appendChild(noResultsRow);
        }

        if (table) {
            const headers = table.querySelectorAll('th[data-sort]');
            headers.forEach((header, index) => {
                const sortIcon = header.querySelector('.sort-icon');
                if (sortIcon) {
                    header.addEventListener('click', function () {
                        const column = header.dataset.sort;
                        let newSortDir = 'asc';

                        if (currentSortColumn === column) {
                            newSortDir = currentSortDir === 'asc' ? 'desc' : 'asc';
                        }

                        headers.forEach(h => {
                            const icon = h.querySelector('.sort-icon');
                            if (icon) {
                                icon.classList.remove('asc', 'desc', 'active');
                                icon.dataset.sortDir = 'none';
                            }
                        });

                        sortIcon.classList.add(newSortDir, 'active');
                        sortIcon.dataset.sortDir = newSortDir;

                        currentSortColumn = column;
                        currentSortDir = newSortDir;

                        sortTable(index, newSortDir);
                        filterTable(searchField?.value.trim() || '', currentFilters);
                    });
                }
            });
        }

        // --- Delete Confirmation Logic ---
        let rowToDelete = null;
        if (tableBody && deleteModalElement) {
            tableBody.addEventListener('click', function (event) {
                const target = event.target.closest('.delete-icon');
                if (target) {
                    event.preventDefault();
                    rowToDelete = target.closest('tr');
                    if (rowToDelete) {
                        const trackingNumber = rowToDelete.querySelectorAll('td')[1].textContent.trim();
                        if (deleteModalBody) {
                            deleteModalBody.textContent = `Are you sure you want to delete request with Tracking Number "${trackingNumber}"? This action cannot be undone.`;
                        }
                        const modalInstance = bootstrap.Modal.getOrCreateInstance(deleteModalElement);
                        modalInstance.show();
                    }
                }
            });
        } else {
            console.error('Table body or delete modal not found.');
        }

        if (confirmDeleteBtn && deleteModalElement) {
            confirmDeleteBtn.addEventListener('click', function () {
                if (rowToDelete) {
                    rowToDelete.classList.add('fade-out');
                    setTimeout(() => {
                        rowToDelete.style.display = 'none';
                        rowToDelete = null;
                        const modalInstance = bootstrap.Modal.getOrCreateInstance(deleteModalElement);
                        modalInstance.hide();
                        const visibleRows = allRows.filter(row => row.style.display !== 'none');
                        if (visibleRows.length === 0 && noResultsRow) {
                            noResultsRow.style.display = '';
                        }
                    }, 500);
                }
            });
        } else {
            console.error('Confirm delete button or modal not found.');
        }
    });
</script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src=~/js/filter.js></script>

<style>

    .content {
        visibility: hidden;
        height: 0;
        overflow: hidden;
        transition: height 0.3s ease, visibility 0.3s ease;
    }

        .content.show {
            visibility: visible;
            height: auto;
        }

    .toggleBtn {
        display: block;
        width: 100%;
        text-align: left;
        background-color: #004869;
        color: white;
        border: none;
        padding: 10px;
        cursor: pointer;
        font-weight: bold;
    }

        .toggleBtn:hover {
            background-color: #008060;
        }

    .rotate-icon {
        display: inline-block;
        transition: transform 0.3s ease;
    }

        .rotate-icon.rotated {
            transform: rotate(180deg);
        }
</style>